package MathematicsCalculator;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import sylu.spring.aop.helloworld.MathematicsCalculator;

public class MathematicCalculatorLoggingProxy {
	// 要代理的对象
	private MathematicsCalculator taget;

	public MathematicsCalculator getLoggingProxy() {
		MathematicsCalculator proxy = null;
		
		//代理对象由哪一个类加载器负责加载
		ClassLoader loader = taget.getClass().getClassLoader();
		//代理对象的类型，即其中有哪些方法
		Class[] interfaces = new Class[]{MathematicsCalculator.class};
		//当调用代理对象中的方法是，该执行的代码
		InvocationHandler h = new InvocationHandler() {
			
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				System.out.println("invoke。。。。。");
				return null;
			}
		};
		
		proxy= (MathematicsCalculator) Proxy.newProxyInstance(loader, interfaces, h)
		return null;
	}
}
