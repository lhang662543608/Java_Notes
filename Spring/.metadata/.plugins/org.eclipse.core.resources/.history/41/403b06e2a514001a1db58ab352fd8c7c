package sylu.spring.aop.xml;

import java.util.Arrays;
import java.util.List;

import org.aspectj.lang.JoinPoint;

public class LoggingAspect {

	public void beforeMethod(JoinPoint joinpoint) {
		String methodName = joinpoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinpoint.getArgs());
		System.out.println("The method " + methodName + " begins with " + args);
	}

	public void afterMethod(JoinPoint joinpoint) {
		String methodName = joinpoint.getSignature().getName();
		System.out.println("The method " + methodName + " ends ");
	}

	public void afterReturning(JoinPoint joinPoint, Object result) {
		String methodName = joinPoint.getSignature().getName();
		System.out.println("The method " + methodName + " ends with " + result);
	}

	public void afterThrowing(JoinPoint joinPoint, Exception ex) {
		String methodName = joinPoint.getSignature().getName();
		System.out.println("The method " + methodName + " occs with " + ex);
	}

	/*
	 * public Object aroundMethod(ProceedingJoinPoint pjd) { Object result =
	 * null; String methodName = pjd.getSignature().getName(); // 执行目标方法 try {
	 * // 前置通知 System.out.println("The method " + methodName + " begins with " +
	 * Arrays.asList(pjd.getArgs())); result = pjd.proceed(); // 返回通知
	 * System.out.println("The method" + methodName + " ends with " + result); }
	 * catch (Throwable e) { System.out.println("The method " + methodName +
	 * " occs with " + e); throw new RuntimeException(e); } // 后置通知
	 * System.out.println("The method " + methodName + " ends"); return result;
	 * }
	 */
}
