package sylu.spring.aop.impl;

import java.util.Arrays;
import java.util.List;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

//把这个类声明为一个切面：需要把该类放入到IOC容器中、在声明为一个切面
@Aspect
@Component
public class LoggingAspect {
	// 前置通知：在目标方法开始之前执行
	@Before("execution(public * sylu.spring.aop.impl.*.*(..))")
	public void beforeMethod(JoinPoint joinpoint) {
		String methodName = joinpoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinpoint.getArgs());
		System.out.println("The method " + methodName + " begins with " + args);
	}

	// 后置通知： 在目标方法执行后（无论是否发生异常），执行的通知。
	// 在后置通知中还无法返回目标方法执行的结果。
	@After("execution(public * sylu.spring.aop.impl.*.*(..))")
	public void afterMethod(JoinPoint joinpoint) {
		String methodName = joinpoint.getSignature().getName();
		System.out.println("The method " + methodName + " ends ");
	}

	// 返回通知：在方法正常结束后受执行的代码
	// 返回通知是可以访问到方法的返回值的。
	@AfterReturning(value = "execution(public * sylu.spring.aop.impl.*.*(..))", returning = "result")
	public void afterReturning(JoinPoint joinPoint, Object result) {
		String methodName = joinPoint.getSignature().getName();
		System.out.println("The method " + methodName + " ends with " + result);
	}

	@AfterThrowing(value = "execution(public * sylu.spring.aop.impl.*.*(..))", throwing = "ex")
	public void afterThrowing(JoinPoint joinPoint, Exception ex) {
		String methodName = joinPoint.getSignature().getName();
		System.out.println("The method " + methodName + " occs with " + ex);
	}
}
